// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System.Threading;
using System.Threading.Tasks;
using DH.Lending.Borrower.Api.Sdk.V1.Lending.Rest.Client.Models;

namespace DH.Lending.Borrower.Api.Sdk.V1.Lending.Rest.Client
{
    public static partial class BorrowerExtensions
    {
        /// <param name='operations'>
        /// Reference to the Api.Sdk.IBorrower.
        /// </param>
        /// <param name='borrowerId'>
        /// Required.
        /// </param>
        public static object DeleteByBorrowerid(this IBorrower operations, string borrowerId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBorrower)s).DeleteByBorroweridAsync(borrowerId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Api.Sdk.IBorrower.
        /// </param>
        /// <param name='borrowerId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> DeleteByBorroweridAsync(this IBorrower operations, string borrowerId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.DeleteByBorroweridWithOperationResponseAsync(borrowerId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Api.Sdk.IBorrower.
        /// </param>
        /// <param name='borrowerId'>
        /// Required.
        /// </param>
        public static BorrowerDto GetByBorrowerid(this IBorrower operations, string borrowerId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBorrower)s).GetByBorroweridAsync(borrowerId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Api.Sdk.IBorrower.
        /// </param>
        /// <param name='borrowerId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<BorrowerDto> GetByBorroweridAsync(this IBorrower operations, string borrowerId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<BorrowerDto> result = await operations.GetByBorroweridWithOperationResponseAsync(borrowerId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Api.Sdk.IBorrower.
        /// </param>
        /// <param name='borrower'>
        /// Required.
        /// </param>
        public static BorrowerDto PostByBorrower(this IBorrower operations, BorrowerDto borrower)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBorrower)s).PostByBorrowerAsync(borrower);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Api.Sdk.IBorrower.
        /// </param>
        /// <param name='borrower'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<BorrowerDto> PostByBorrowerAsync(this IBorrower operations, BorrowerDto borrower, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<BorrowerDto> result = await operations.PostByBorrowerWithOperationResponseAsync(borrower, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Api.Sdk.IBorrower.
        /// </param>
        /// <param name='borrower'>
        /// Required.
        /// </param>
        public static BorrowerDto PutByBorrower(this IBorrower operations, BorrowerDto borrower)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBorrower)s).PutByBorrowerAsync(borrower);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Api.Sdk.IBorrower.
        /// </param>
        /// <param name='borrower'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<BorrowerDto> PutByBorrowerAsync(this IBorrower operations, BorrowerDto borrower, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<BorrowerDto> result = await operations.PutByBorrowerWithOperationResponseAsync(borrower, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
